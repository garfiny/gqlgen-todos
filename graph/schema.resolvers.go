package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/garfiny/gqlgen-todos/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", randNumber),
		User: &model.User{ID: input.UserID, Name: fmt.Sprintf("user %d", input.UserID)},
	}
	r.TodoList = append(r.TodoList, todo)
	return todo, nil
}

// CreateWish is the resolver for the createWish field.
func (r *mutationResolver) CreateWish(ctx context.Context, input model.NewWish) (*model.Wish, error) {
	panic(fmt.Errorf("not implemented: CreateWish - createWish"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.TodoList, nil
}

// WishList is the resolver for the wishList field.
func (r *queryResolver) WishList(ctx context.Context) ([]*model.Wish, error) {
	fmt.Printf("WishList invoked in QueryResolver")
	return r.Wishes, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	u, err := r.UserRepo.GetUserByID(obj.UserID)
	if err != nil {
		return nil, err
	}
	return u, nil
}

// Username is the resolver for the username field.
func (r *userResolver) Username(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: Username - username"))
}

// Email is the resolver for the email field.
func (r *userResolver) Email(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Todos is the resolver for the todos field.
func (r *wishResolver) Todos(ctx context.Context, obj *model.Wish) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// UserID is the resolver for the userId field.
func (r *newTodoResolver) UserID(ctx context.Context, obj *model.NewTodo, data string) error {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// Wish returns WishResolver implementation.
func (r *Resolver) Wish() WishResolver { return &wishResolver{r} }

// NewTodo returns NewTodoResolver implementation.
func (r *Resolver) NewTodo() NewTodoResolver { return &newTodoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type wishResolver struct{ *Resolver }
type newTodoResolver struct{ *Resolver }
